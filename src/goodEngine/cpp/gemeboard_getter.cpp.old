
#include "board.cpp"

#ifndef GB_GETTER_CPP
#define GB_GETTER_CPP
struct pos{
    int i;
    int j;
    int h;
};




struct GB{
    char gb[32][32][5];
    pos bugPosition[32];
    bool isEmpty;
    char turn=0;
};

bool isOn[28];

pos pn(int i,pos s){
    pos q{0,0,0};
    switch (i)
    {
    case 0:
        if(s.i%2==1){
            q.i=s.i+1;
            q.j=s.j;
            q.h=s.h;
        }else{
            q.i=s.i+1;
            q.j=s.j-1;
            q.h=s.h;            
        }
        break;
    case 1:
        if(s.i%2==1){
            q.i=s.i+1;
            q.j=s.j+1;
            q.h=s.h;
        }else{
            q.i=s.i+1;
            q.j=s.j;
            q.h=s.h;            
        }
        break;
    case 2:
        q.i=s.i;
        q.j=s.j+1;
        q.h=s.h;
        break;
    case 3:
        if(s.i%2==1){
            q.i=s.i-1;
            q.j=s.j+1;
            q.h=s.h;
        }else{
            q.i=s.i-1;
            q.j=s.j;
            q.h=s.h;            
        }
        break;
    case 4:
        if(s.i%2==1){
            q.i=s.i-1;
            q.j=s.j;
            q.h=s.h;
        }else{
            q.i=s.i-1;
            q.j=s.j-1;
            q.h=s.h;            
        }
        break;
    case 5:
        q.i=s.i;
        q.j=s.j-1;
        q.h=s.h;
        break;
    case 6:
        q.i=s.i;
        q.j=s.j;
        q.h=s.h+1;
        break;
    case 7:
        q.i=s.i;
        q.j=s.j;
        q.h=s.h-1;
        break;
    }
    q.i=q.i%32;
    q.j=q.j%32;
    q.h=q.h%5;
    return q;
}

void placePiece(char* state,GB & g,char p, pos sp){
    isOn[p]=1;
    for(int nb=0;nb<8;nb++){
        char can=state[p*10+nb];
        if(can&32==0){continue;}
        can&=31;
        if(isOn[can]){continue;}    
        pos futPos=pn(nb,sp);
        g.gb[(futPos.i+SIZE_BOARD)%SIZE_BOARD][(futPos.j+SIZE_BOARD)%SIZE_BOARD][futPos.h]=can|32;
        g.bugPosition[can]=futPos;
        placePiece(state,g,can,futPos);
    }
}

GB generateGB(char* state){
    int sp=0;
    for(int i=0;i<28;i++){isOn[i]=0;}
    while(sp<28){
        if(!isPlaced(sp))sp++;
    }
    GB g;

    if(sp==28){
        g.isEmpty=true;
        g.turn=0;
        throw "Empty";
    }

    for(int i=0;i<32;i++){
        for(int j=0;j<32;j++)
            for(int k=0;k<5;k++)g.gb[i][j][k]=0;
        g.bugPosition[i]={0,0,0};
    }
    g.turn=currentTurn(state);
    g.isEmpty=0;

    placePiece(state,g,sp,{0,0,0});
    return g;
}





#endif